
import { serve } from "https://deno.land/std@0.224.0/http/server.ts";

console.log("gemini-search edge function starting up.");

const GEMINI_API_KEY = Deno.env.get("GEMINI_API_KEY");

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "POST, GET, OPTIONS",
  "Access-Control-Allow-Headers":
    "authorization, x-client-info, apikey, content-type",
};

serve(async (req: Request) => {
  console.log(`[gemini-search] Received request: ${req.method}`);
  
  // Explicitly handle CORS preflight requests
  if (req.method === "OPTIONS") {
    console.log("[gemini-search] Handling OPTIONS preflight request.");
    return new Response(null, { status: 204, headers: corsHeaders });
  }

  try {
    if (!GEMINI_API_KEY) {
      console.error("[gemini-search] GEMINI_API_KEY is not set in environment variables.");
      return new Response(
        JSON.stringify({ error: "Missing GEMINI_API_KEY. Please set it in Supabase secrets." }),
        {
          status: 500,
          headers: { ...corsHeaders, "Content-Type": "application/json" },
        }
      );
    }
    console.log("[gemini-search] GEMINI_API_KEY is present.");

    const { prompt } = await req.json();
    console.log("[gemini-search] Request prompt:", prompt);

    if (!prompt) {
      console.error("[gemini-search] Prompt is required but was not found in the request body.");
      return new Response(JSON.stringify({ error: "Prompt is required" }), {
        status: 400,
        headers: { ...corsHeaders, "Content-Type": "application/json" },
      });
    }
    
    console.log("[gemini-search] Sending request to Gemini API...");
    const res = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${GEMINI_API_KEY}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          contents: [{ parts: [{ text: prompt }] }],
        }),
      }
    );
    console.log(`[gemini-search] Gemini API response status: ${res.status}`);

    const responseBodyText = await res.text();

    if (!res.ok) {
      console.error("[gemini-search] Gemini API request failed. Response body:", responseBodyText);
      throw new Error(
        `Gemini API request failed with status ${res.status}: ${responseBodyText}`
      );
    }
    
    let data;
    try {
        data = JSON.parse(responseBodyText);
    } catch(e) {
        console.error("[gemini-search] Failed to parse Gemini API response as JSON. Body:", responseBodyText);
        throw new Error("Invalid JSON response from Gemini API.");
    }

    console.log("[gemini-search] Gemini API response data:", data);
    const generatedText = data?.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!generatedText) {
      console.error("[gemini-search] No content generated by Gemini. Full response:", data);
      throw new Error("Failed to generate content from Gemini.");
    }

    console.log("[gemini-search] Successfully generated text from Gemini.");
    return new Response(JSON.stringify({ response: generatedText }), {
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  } catch (error) {
    console.error("[gemini-search] An unexpected error occurred:", error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, "Content-Type": "application/json" },
    });
  }
});
